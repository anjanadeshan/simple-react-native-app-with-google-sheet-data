{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"wrapperRef\"],\n    _excluded2 = [\"totalLines\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Input } from \"../Input\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar TextArea = function TextArea(_ref, ref) {\n  var wrapperRef = _ref.wrapperRef,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('TextArea', props),\n      totalLines = _usePropsResolution.totalLines,\n      newProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Input, _extends({}, newProps, {\n    numberOfLines: totalLines,\n    wrapperRef: wrapperRef,\n    ref: ref\n  }));\n};\n\nexport default memo(forwardRef(TextArea));","map":{"version":3,"sources":["index.tsx"],"names":["TextArea","props","newProps","usePropsResolution","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,KAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;;AAQA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAAA,GAAA,EAAwD;AAAA,MAAvD,UAAuD,QAAvD,UAAuD;AAAA,MAAtCC,KAAsC;;AACvE,4BAAoCE,kBAAkB,CAAA,UAAA,EADiB,KACjB,CAAtD;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAuBD,QAAvB;;AAEA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAEE,IAAA,aAAa,EAFf,UAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,GAAG,EAAEC;AAJP,GAAA,CAAA,CADF;AANF,CAAA;;AAgBA,eAAeC,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input, IInputProps } from '../Input';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport interface ITextAreaProps extends IInputProps {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = ({ wrapperRef, ...props }: ITextAreaProps, ref: any) => {\n  const { totalLines, ...newProps } = usePropsResolution('TextArea', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]},"metadata":{},"sourceType":"module"}