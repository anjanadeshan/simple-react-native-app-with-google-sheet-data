{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"wrapperRef\"],\n    _excluded2 = [\"isInvalid\", \"isReadOnly\", \"isIndeterminate\"],\n    _excluded3 = [\"icon\", \"_interactionBox\", \"_icon\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from \"../../../utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { Center } from \"../../composites/Center\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport Box from \"../Box\";\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from \"./CheckboxGroup\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { combineContextAndProps } from \"../../../utils\";\nimport SizedIcon from \"./SizedIcon\";\n\nvar Checkbox = function Checkbox(_ref2, ref) {\n  var wrapperRef = _ref2.wrapperRef,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var formControlContext = useFormControlContext();\n\n  var _combineContextAndPro = combineContextAndProps(formControlContext, props),\n      isInvalid = _combineContextAndPro.isInvalid,\n      isReadOnly = _combineContextAndPro.isReadOnly,\n      isIndeterminate = _combineContextAndPro.isIndeterminate,\n      combinedProps = _objectWithoutProperties(_combineContextAndPro, _excluded2);\n\n  var checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  var state = useToggleState(_objectSpread(_objectSpread({}, props), {}, {\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked\n  }));\n\n  var _ref = React.useRef();\n\n  var mergedRef = mergeRefs([ref, _ref]);\n\n  var _ref3 = checkboxGroupContext ? useCheckboxGroupItem(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': combinedProps.accessibilityLabel,\n    'value': combinedProps.value\n  }), checkboxGroupContext.state, mergedRef) : useCheckbox(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': combinedProps.accessibilityLabel\n  }), state, mergedRef),\n      groupItemInputProps = _ref3.inputProps;\n\n  var inputProps = React.useMemo(function () {\n    return groupItemInputProps;\n  }, [groupItemInputProps.checked, groupItemInputProps.disabled]);\n\n  var _React$useState = React.useState(_objectSpread(_objectSpread({}, checkboxGroupContext), combinedProps)),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      contextCombinedProps = _React$useState2[0];\n\n  return React.createElement(CheckboxComponent, {\n    wrapperRef: wrapperRef,\n    mergedRef: mergedRef,\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isIndeterminate: isIndeterminate\n  });\n};\n\nvar CheckboxComponent = React.memo(function (_ref4) {\n  var wrapperRef = _ref4.wrapperRef,\n      inputProps = _ref4.inputProps,\n      combinedProps = _ref4.combinedProps,\n      isInvalid = _ref4.isInvalid,\n      isReadOnly = _ref4.isReadOnly,\n      isIndeterminate = _ref4.isIndeterminate,\n      mergedRef = _ref4.mergedRef;\n\n  var _ref = React.useRef();\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var isChecked = inputProps.checked,\n      isDisabled = inputProps.disabled;\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _usePropsResolution = usePropsResolution('Checkbox', combinedProps, {\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isFocusVisible: true,\n    isDisabled: isDisabled,\n    isIndeterminate: isIndeterminate,\n    isChecked: isChecked,\n    isHovered: true\n  }),\n      icon = _usePropsResolution.icon,\n      _interactionBox = _usePropsResolution._interactionBox,\n      _icon = _usePropsResolution._icon,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded3);\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), ['_text'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var component = React.useMemo(function () {\n    return React.createElement(Box, _extends({}, layoutProps, {\n      opacity: isDisabled ? 0.4 : 1,\n      cursor: isDisabled ? 'not-allowed' : 'pointer'\n    }), React.createElement(Center, null, React.createElement(Box, _extends({}, _interactionBox, {\n      style: {\n        transition: 'height 200ms, width 200ms'\n      },\n      h: isFocusVisible || isHovered ? '200%' : '0%',\n      w: isFocusVisible || isHovered ? '200%' : '0%',\n      pointerEvents: \"none\",\n      zIndex: -1\n    })), React.createElement(Center, nonLayoutProps, React.createElement(SizedIcon, {\n      icon: icon,\n      _icon: _icon,\n      isChecked: isChecked\n    }))), resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children);\n  }, [_icon, _interactionBox, icon, isChecked, isDisabled, isFocusVisible, isHovered, layoutProps, nonLayoutProps, resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children]);\n  var mergedWrapperRef = React.useMemo(function () {\n    return mergeRefs([wrapperRef, _ref]);\n  }, [wrapperRef]);\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedWrapperRef\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: mergedRef\n  }))), component);\n});\nexport default memo(forwardRef(Checkbox));","map":{"version":3,"sources":["Checkbox.web.tsx"],"names":["Checkbox","props","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","checkboxGroupContext","React","state","useToggleState","defaultSelected","isSelected","isChecked","_ref","mergedRef","mergeRefs","inputProps","groupItemInputProps","useCheckboxGroupItem","value","useCheckbox","accessibilityLabel","isIndeterminate","CheckboxComponent","isHovered","useHover","checked","disabled","isDisabled","isFocusVisible","useFocusRing","resolvedProps","usePropsResolution","isInvalid","isReadOnly","extractInObject","stylingProps","component","transition","mergedWrapperRef","useHasResponsiveProps","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\n\nconst Checkbox = ({ wrapperRef, ...props }: ICheckboxProps, ref: any) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isIndeterminate={isIndeterminate}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: true,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: true,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n\n    const component = React.useMemo(() => {\n      return (\n        <Box\n          {...layoutProps}\n          opacity={isDisabled ? 0.4 : 1}\n          cursor={isDisabled ? 'not-allowed' : 'pointer'}\n        >\n          <Center>\n            {/* Interaction Box */}\n            <Box\n              {..._interactionBox}\n              style={{\n                // @ts-ignore - only for web\"\n                transition: 'height 200ms, width 200ms',\n              }}\n              h={isFocusVisible || isHovered ? '200%' : '0%'}\n              w={isFocusVisible || isHovered ? '200%' : '0%'}\n              pointerEvents=\"none\"\n              zIndex={-1}\n            />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {resolvedProps?.children}\n        </Box>\n      );\n    }, [\n      _icon,\n      _interactionBox,\n      icon,\n      isChecked,\n      isDisabled,\n      isFocusVisible,\n      isHovered,\n      layoutProps,\n      nonLayoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]},"metadata":{},"sourceType":"module"}