{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"_icon\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { ModalContext } from \"./Context\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport Button from \"../../primitives/Button/Button\";\nimport { CloseIcon } from \"../../primitives/Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar ModalCloseButton = function ModalCloseButton(props, ref) {\n  var _usePropsResolution = usePropsResolution('ModalCloseButton', props),\n      _icon = _usePropsResolution._icon,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var _React$useContext = React.useContext(ModalContext),\n      handleClose = _React$useContext.handleClose;\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Button, _extends({\n    variant: \"ghost\"\n  }, resolvedProps, {\n    onPress: handleClose,\n    accessibilityLabel: \"Close dialog\",\n    ref: ref\n  }), React.createElement(CloseIcon, _icon));\n};\n\nexport default memo(forwardRef(ModalCloseButton));","map":{"version":3,"sources":["ModalCloseButton.tsx"],"names":["ModalCloseButton","resolvedProps","usePropsResolution","handleClose","React","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,YAAA;AACA,SAAA,kBAAA;AACA,OAAA,MAAA;AACA,SAAA,SAAA;AAEA,SAAA,qBAAA;;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,KAAA,EAAA,GAAA,EAAoC;AAC3D,4BAAoCE,kBAAkB,CAAA,kBAAA,EAAtD,KAAsD,CAAtD;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAkBD,aAAlB;;AAIA,0BAAwBG,KAAK,CAALA,UAAAA,CALmC,YAKnCA,CAAxB;AAAA,MAAQD,WAAR,qBAAQA,WAAR;;AAEA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,OAAO,EAAC;AADV,GAAA,EAAA,aAAA,EAAA;AAGE,IAAA,OAAO,EAHT,WAAA;AAIE,IAAA,kBAAkB,EAJpB,cAAA;AAKE,IAAA,GAAG,EAAEC;AALP,GAAA,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,SAAA,EARJ,KAQI,CAPF,CADF;AAVF,CAAA;;AAuBA,eAAeC,IAAI,CAACC,UAAU,CAA9B,gBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ModalContext } from './Context';\nimport { usePropsResolution } from '../../../hooks';\nimport Button from '../../primitives/Button/Button';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalCloseButton = (props: IButtonProps, ref?: any) => {\n  const { _icon, ...resolvedProps } = usePropsResolution(\n    'ModalCloseButton',\n    props\n  );\n  const { handleClose } = React.useContext(ModalContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Button\n      variant=\"ghost\"\n      {...resolvedProps}\n      onPress={handleClose}\n      accessibilityLabel=\"Close dialog\"\n      ref={ref}\n    >\n      <CloseIcon {..._icon} />\n    </Button>\n  );\n};\n\nexport default memo(forwardRef(ModalCloseButton));\n"]},"metadata":{},"sourceType":"module"}