{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar AlertDialogBody = function AlertDialogBody(props, ref) {\n  var newProps = usePropsResolution('AlertDialogBody', props);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(ScrollView, null, React.createElement(Box, _extends({}, newProps, {\n    ref: ref\n  }), props.children));\n};\n\nexport default memo(forwardRef(AlertDialogBody));","map":{"version":3,"sources":["AlertDialogBody.tsx"],"names":["AlertDialogBody","newProps","usePropsResolution","useHasResponsiveProps","ref","props","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AACA,SAAA,kBAAA;;AAEA,SAAA,qBAAA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAA,GAAA,EAAiC;AACvD,MAAMC,QAAQ,GAAGC,kBAAkB,CAAA,iBAAA,EADoB,KACpB,CAAnC;;AAEA,MAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAAmB,IAAA,GAAG,EAAEC;AAAxB,GAAA,CAAA,EACGC,KAAK,CAHZ,QAEI,CADF,CADF;AANF,CAAA;;AAeA,eAAeC,IAAI,CAACC,UAAU,CAA9B,eAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ScrollView } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogBody = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogBody', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <ScrollView>\n      <Box {...newProps} ref={ref}>\n        {props.children}\n      </Box>\n    </ScrollView>\n  );\n};\n\nexport default memo(forwardRef(AlertDialogBody));\n"]},"metadata":{},"sourceType":"module"}