{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"hideDragIndicator\"],\n    _excluded2 = [\"isOpen\", \"disableOverlay\", \"onClose\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Modal } from \"../../composites/Modal\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { ActionSheetContext } from \"./ActionSheetContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Actionsheet = function Actionsheet(_ref, ref) {\n  var children = _ref.children,\n      _ref$hideDragIndicato = _ref.hideDragIndicator,\n      hideDragIndicator = _ref$hideDragIndicato === void 0 ? false : _ref$hideDragIndicato,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Actionsheet', props),\n      isOpen = _usePropsResolution.isOpen,\n      disableOverlay = _usePropsResolution.disableOverlay,\n      onClose = _usePropsResolution.onClose,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    justifyContent: \"flex-end\",\n    animationPreset: \"slide\"\n  }, resolvedProps, {\n    overlayVisible: disableOverlay ? false : true,\n    closeOnOverlayClick: disableOverlay ? false : true,\n    ref: ref\n  }), React.createElement(ActionSheetContext.Provider, {\n    value: {\n      hideDragIndicator: hideDragIndicator\n    }\n  }, children));\n};\n\nexport default memo(forwardRef(Actionsheet));","map":{"version":3,"sources":["Actionsheet.tsx"],"names":["Actionsheet","hideDragIndicator","props","resolvedProps","usePropsResolution","useHasResponsiveProps","disableOverlay","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,KAAA;AAEA,SAAA,kBAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAA,GAAA,EAGf;AAAA,MAFH,QAEG,QAFH,QAEG;AAAA,mCAFSC,iBAET;AAAA,MAFSA,iBAET,sCAFH,KAEG;AAAA,MAFuCC,KAEvC;;AACH,4BAKIE,kBAAkB,CAAA,aAAA,EANnB,KAMmB,CALtB;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAAM,cAAN,uBAAM,cAAN;AAAA,MAAM,OAAN,uBAAM,OAAN;AAAA,MAIKD,aAJL;;AAQA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,IAAA,MAAM,EADR,MAAA;AAEE,IAAA,OAAO,EAFT,OAAA;AAGE,IAAA,cAAc,EAHhB,UAAA;AAKE,IAAA,eAAe,EAAC;AALlB,GAAA,EAAA,aAAA,EAAA;AAOE,IAAA,cAAc,EAAEC,cAAc,GAAA,KAAA,GAPhC,IAAA;AAQE,IAAA,mBAAmB,EAAEA,cAAc,GAAA,KAAA,GARrC,IAAA;AASE,IAAA,GAAG,EAAEC;AATP,GAAA,CAAA,EAWE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AAA6B,IAAA,KAAK,EAAE;AAAEN,MAAAA,iBAAAA,EAAAA;AAAF;AAApC,GAAA,EAZJ,QAYI,CAXF,CADF;AAfF,CAAA;;AAkCA,eAAeO,IAAI,CAACC,UAAU,CAA9B,WAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Actionsheet = (\n  { children, hideDragIndicator = false, ...props }: IActionsheetProps,\n  ref: any\n) => {\n  const {\n    isOpen,\n    disableOverlay,\n    onClose,\n    ...resolvedProps\n  } = usePropsResolution('Actionsheet', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      justifyContent=\"flex-end\"\n      //@ts-ignore - internal use only\n      animationPreset=\"slide\"\n      {...resolvedProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n    >\n      <ActionSheetContext.Provider value={{ hideDragIndicator }}>\n        {children}\n      </ActionSheetContext.Provider>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]},"metadata":{},"sourceType":"module"}