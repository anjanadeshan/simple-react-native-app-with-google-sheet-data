{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"style\", \"ratio\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { default as Box } from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { usePropsResolution } from \"../../../hooks\";\nvar AspectView = forwardRef(function (props, ref) {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var inputStyle = [StyleSheet.flatten(props.style) || {}];\n\n  if (layout) {\n    var _layout$width = layout.width,\n        width = _layout$width === void 0 ? 0 : _layout$width,\n        _layout$height = layout.height,\n        height = _layout$height === void 0 ? 0 : _layout$height;\n\n    if (width === 0) {\n      inputStyle.push({\n        width: height * props.aspectRatio,\n        height: height\n      });\n    } else {\n      inputStyle.push({\n        width: width,\n        height: width / props.aspectRatio\n      });\n    }\n  }\n\n  return React.createElement(Box, _extends({}, props, {\n    ref: ref,\n    style: inputStyle,\n    onLayout: function onLayout(_ref) {\n      var inLayout = _ref.nativeEvent.layout;\n      return setLayout(inLayout);\n    }\n  }));\n});\n\nvar AspectRatio = function AspectRatio(props, ref) {\n  var _usePropsResolution = usePropsResolution('AspectRatio', props, {}, {\n    resolveResponsively: ['ratio']\n  }),\n      style = _usePropsResolution.style,\n      ratio = _usePropsResolution.ratio,\n      children = _usePropsResolution.children,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var computedStyle = style;\n  var newChildWithProps = React.cloneElement(children, _objectSpread(_objectSpread({}, children.props), {}, {\n    style: StyleSheet.absoluteFillObject\n  }), children.props.children);\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  if (Platform.OS === 'web') {\n    return React.createElement(AspectView, _extends({}, resolvedProps, {\n      aspectRatio: ratio,\n      style: style,\n      ref: ref\n    }), newChildWithProps);\n  } else {\n    computedStyle = StyleSheet.flatten([style, {\n      aspectRatio: ratio\n    }]);\n    return React.createElement(Box, _extends({}, resolvedProps, {\n      style: computedStyle,\n      ref: ref\n    }), newChildWithProps);\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));","map":{"version":3,"sources":["index.tsx"],"names":["default","AspectView","forwardRef","React","inputStyle","StyleSheet","props","width","height","aspectRatio","nativeEvent","layout","inLayout","setLayout","AspectRatio","resolvedProps","usePropsResolution","resolveResponsively","computedStyle","newChildWithProps","children","style","absoluteFillObject","useHasResponsiveProps","Platform","ref","ratio","memo"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nimport type { IAspectRatioProps } from './types';\n\nconst AspectView = forwardRef((props: any, ref?: any) => {\n  const [layout, setLayout] = React.useState();\n  const inputStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let { width = 0, height = 0 } = layout;\n    if (width === 0) {\n      inputStyle.push({ width: height * props.aspectRatio, height });\n    } else {\n      inputStyle.push({ width, height: width / props.aspectRatio });\n    }\n  }\n\n  return (\n    <Box\n      {...props}\n      ref={ref}\n      style={inputStyle}\n      onLayout={({ nativeEvent: { layout: inLayout } }: any) =>\n        setLayout(inLayout)\n      }\n    />\n  );\n});\n\nconst AspectRatio = (props: IAspectRatioProps, ref?: any) => {\n  const { style, ratio, children, ...resolvedProps } = usePropsResolution(\n    'AspectRatio',\n    props,\n    {},\n    { resolveResponsively: ['ratio'] }\n  );\n  let computedStyle: ViewStyle | undefined = style;\n  let newChildWithProps = React.cloneElement(\n    children,\n    {\n      ...children.props,\n      style: StyleSheet.absoluteFillObject,\n    },\n    children.props.children\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n  if (Platform.OS === 'web') {\n    return (\n      <AspectView\n        {...resolvedProps}\n        aspectRatio={ratio}\n        style={style}\n        ref={ref}\n      >\n        {newChildWithProps}\n      </AspectView>\n    );\n  } else {\n    computedStyle = StyleSheet.flatten([style, { aspectRatio: ratio }]);\n    return (\n      <Box {...resolvedProps} style={computedStyle} ref={ref}>\n        {newChildWithProps}\n      </Box>\n    );\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));\n"]},"metadata":{},"sourceType":"module"}