{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { default as Box } from \"../components/primitives/Box\";\nimport { ResponsiveQueryContext } from \"./useResponsiveQuery/ResponsiveQueryProvider\";\n\nvar getSpacedChildren = function getSpacedChildren(children, space, axis, reverse, divider) {\n  var childrenArray = React.Children.toArray(children);\n  childrenArray = reverse === 'reverse' ? _toConsumableArray(childrenArray).reverse() : childrenArray;\n  var orientation = axis === 'X' ? 'vertical' : 'horizontal';\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (divider) {\n    var spacingProp = _objectSpread({}, axis === 'X' ? {\n      mx: space\n    } : {\n      my: space\n    });\n\n    divider = React.cloneElement(divider, _objectSpread({\n      orientation: orientation\n    }, spacingProp));\n    childrenArray = childrenArray.map(function (child, index) {\n      var _child$key;\n\n      return React.createElement(React.Fragment, {\n        key: (_child$key = child.key) !== null && _child$key !== void 0 ? _child$key : \"spaced-child-\".concat(index)\n      }, child, index < childrenArray.length - 1 && divider);\n    });\n  } else {\n    var _spacingProp = _objectSpread({}, axis === 'X' ? {\n      width: space\n    } : {\n      height: space\n    });\n\n    childrenArray = childrenArray.map(function (child, index) {\n      var _child$key2;\n\n      return React.createElement(React.Fragment, {\n        key: (_child$key2 = child.key) !== null && _child$key2 !== void 0 ? _child$key2 : \"spaced-child-\".concat(index)\n      }, child, disableCSSMediaQueries ? index < childrenArray.length - 1 && React.createElement(Box, _spacingProp) : React.createElement(React.Fragment, null));\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;","map":{"version":3,"sources":["getSpacedChildren.tsx"],"names":["default","getSpacedChildren","childrenArray","React","reverse","orientation","axis","responsiveQueryContext","disableCSSMediaQueries","spacingProp","mx","space","my","divider","child","index","width","height"],"mappings":";;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAASA,OAAO,IAAhB,GAAA;AAEA,SAAA,sBAAA;;AAaA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,QAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAMhB;AACR,MAAIC,aAAa,GAAGC,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAApB,QAAoBA,CAApB;AACAD,EAAAA,aAAa,GACXE,OAAO,KAAPA,SAAAA,GAAwB,mBAAA,aAAA,EAAxBA,OAAwB,EAAxBA,GADFF,aAAAA;AAGA,MAAMG,WAAW,GAAGC,IAAI,KAAJA,GAAAA,GAAAA,UAAAA,GALZ,YAKR;AAGA,MAAMC,sBAAsB,GAAGJ,KAAK,CAALA,UAAAA,CAA/B,sBAA+BA,CAA/B;AACA,MAAMK,sBAAsB,GAAGD,sBAAsB,CAT7C,sBASR;;AAGA,MAAA,OAAA,EAAa;AACX,QAAME,WAAmB,qBACnB,IAAI,KAAJ,GAAA,GAAe;AAAEC,MAAAA,EAAE,EAAEC;AAAN,KAAf,GAA+B;AAAEC,MAAAA,EAAE,EAAED;AAAN,KADZ,CAAzB;;AAIAE,IAAAA,OAAO,GAAG,KAAK,CAAL,YAAA,CAAA,OAAA;AACRR,MAAAA,WADoC,EACpCA;AADQ,OAELI,WAFK,EAAVI;AAKAX,IAAAA,aAAa,GAAG,aAAa,CAAb,GAAA,CAAkB,UAAA,KAAA,EAAA,KAAA,EAA+B;AAAA,UAAA,UAAA;;AAC/D,aACE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA;AAAgB,QAAA,GAAG,EAAA,CAAA,UAAA,GAAEY,KAAK,CAAP,GAAA,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,UAAA,GAAA,gBAAA,MAAA,CAAA,KAAA;AAAnB,OAAA,EAAA,KAAA,EAEGC,KAAK,GAAGb,aAAa,CAAbA,MAAAA,GAARa,CAAAA,IAHL,OACE,CADF;AADFb,KAAgB,CAAhBA;AAVF,GAAA,MAkBO;AACL,QAAMO,YAAmB,qBACnB,IAAI,KAAJ,GAAA,GAAe;AAAEO,MAAAA,KAAK,EAAEL;AAAT,KAAf,GAAkC;AAAEM,MAAAA,MAAM,EAAEN;AAAV,KADf,CAAzB;;AAGAT,IAAAA,aAAa,GAAG,aAAa,CAAb,GAAA,CAAkB,UAAA,KAAA,EAAA,KAAA,EAA+B;AAAA,UAAA,WAAA;;AAC/D,aACE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA;AAAgB,QAAA,GAAG,EAAA,CAAA,WAAA,GAAEY,KAAK,CAAP,GAAA,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,WAAA,GAAA,gBAAA,MAAA,CAAA,KAAA;AAAnB,OAAA,EAAA,KAAA,EAEGN,sBAAsB,GACrBO,KAAK,GAAGb,aAAa,CAAbA,MAAAA,GAARa,CAAAA,IAAoC,KAAA,CAAA,aAAA,CAAA,GAAA,EADf,YACe,CADf,GAGrB,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EANN,IAMM,CALJ,CADF;AADFb,KAAgB,CAAhBA;AAYD;;AAED,SAAA,aAAA;AAtDF,CAAA;;AAyDA,eAAA,iBAAA","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(children);\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]},"metadata":{},"sourceType":"module"}