{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"children\", \"onPress\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport { CheckIcon } from \"../../primitives/Icon/Icons\";\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport MenuItem from \"./MenuItem\";\nimport { MenuOptionContext } from \"./MenuOptionGroup\";\nimport { useMenuOptionItem } from \"./useMenu\";\nimport { HStack } from \"../../primitives/Stack\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar MenuItemOption = function MenuItemOption(props, ref) {\n  var _usePropsResolution = usePropsResolution('MenuItem', props),\n      value = _usePropsResolution.value,\n      children = _usePropsResolution.children,\n      onPress = _usePropsResolution.onPress,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var _React$useContext = React.useContext(MenuOptionContext),\n      values = _React$useContext.values,\n      onChange = _React$useContext.onChange,\n      type = _React$useContext.type;\n\n  var modifiedOnPress = function modifiedOnPress(e) {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  var isChecked = values.includes(value);\n  var menuOptionProps = useMenuOptionItem({\n    isChecked: isChecked,\n    type: type\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(MenuItem, _extends({}, resolvedProps, menuOptionProps, {\n    accessibilityRole: \"button\",\n    onPress: modifiedOnPress,\n    ref: ref\n  }), React.createElement(HStack, {\n    alignItems: \"center\",\n    px: resolvedProps.px,\n    space: 3\n  }, React.createElement(CheckIcon, _extends({}, resolvedProps._icon, {\n    opacity: isChecked ? 1 : 0\n  })), React.createElement(Box, null, children)));\n};\n\nexport default memo(forwardRef(MenuItemOption));","map":{"version":3,"sources":["MenuItemOption.tsx"],"names":["MenuItemOption","resolvedProps","usePropsResolution","type","React","modifiedOnPress","e","onChange","onPress","isChecked","values","menuOptionProps","useMenuOptionItem","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,SAAA,SAAA;AACA,OAAA,GAAA;AACA,SAAA,kBAAA;AACA,OAAA,QAAA;AAEA,SAAA,iBAAA;AACA,SAAA,iBAAA;AACA,SAAA,MAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAAA,GAAA,EAA2C;AAChE,4BAAuDE,kBAAkB,CAAA,UAAA,EAAzE,KAAyE,CAAzE;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAM,OAAN,uBAAM,OAAN;AAAA,MAAqCD,aAArC;;AAIA,0BAA4DG,KAAK,CAALA,UAAAA,CAA5D,iBAA4DA,CAA5D;AAAA,MAAM,MAAN,qBAAM,MAAN;AAAA,MAAM,QAAN,qBAAM,QAAN;AAAA,MAA0BD,IAA1B,qBAA0BA,IAA1B;;AAGA,MAAME,eAAe,GAAIC,SAAnBD,eAAmBC,CAAAA,CAAD,EAAY;AAClCC,IAAAA,QAAQ,CAARA,KAAQ,CAARA;AACAC,IAAAA,OAAO,IAAIA,OAAO,CAAlBA,CAAkB,CAAlBA;AAFF,GAAA;;AAKA,MAAMC,SAAS,GAAGC,MAAM,CAANA,QAAAA,CAAlB,KAAkBA,CAAlB;AACA,MAAMC,eAAe,GAAGC,iBAAiB,CAAC;AAAEH,IAAAA,SAAF,EAAEA,SAAF;AAAaN,IAAAA,IAAAA,EAAAA;AAAb,GAAD,CAAzC;;AAGA,MAAIU,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA,eAAA,EAAA;AAGE,IAAA,iBAAiB,EAHnB,QAAA;AAIE,IAAA,OAAO,EAJT,eAAA;AAKE,IAAA,GAAG,EAAEC;AALP,GAAA,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,UAAU,EAAlB,QAAA;AAA4B,IAAA,EAAE,EAAEb,aAAa,CAA7C,EAAA;AAAkD,IAAA,KAAK,EAAE;AAAzD,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAeA,aAAa,CAA5B,KAAA,EAAA;AAAoC,IAAA,OAAO,EAAEQ,SAAS,GAAA,CAAA,GAAO;AAA7D,GAAA,CAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,IAAA,EAVN,QAUM,CAFF,CAPF,CADF;AApBF,CAAA;;AAoCA,eAAeM,IAAI,CAACC,UAAU,CAA9B,cAA8B,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (props: IMenuItemOptionProps, ref: any) => {\n  const { value, children, onPress, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props\n  );\n  const { values, onChange, type }: IMenuOptionContextProps = React.useContext(\n    MenuOptionContext\n  );\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack alignItems=\"center\" px={resolvedProps.px} space={3}>\n        <CheckIcon {...resolvedProps._icon} opacity={isChecked ? 1 : 0} />\n        <Box>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]},"metadata":{},"sourceType":"module"}