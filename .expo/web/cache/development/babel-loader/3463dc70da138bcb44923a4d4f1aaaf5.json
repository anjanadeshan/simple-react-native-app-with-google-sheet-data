{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"min\", \"max\", \"value\", \"_filledTrack\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Box } from \"../../primitives\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Progress = function Progress(props, ref) {\n  var _usePropsResolution = usePropsResolution('Progress', props),\n      min = _usePropsResolution.min,\n      max = _usePropsResolution.max,\n      value = _usePropsResolution.value,\n      _filledTrack = _usePropsResolution._filledTrack,\n      children = _usePropsResolution.children,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref,\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityValue: {\n      min: min,\n      max: max,\n      now: value < max && value > min ? (value - min) / (max - min) * 100 : value > min ? 100 : 0\n    }\n  }), React.createElement(Box, _extends({}, _filledTrack, {\n    w: value < max && value > min ? (value - min) / (max - min) * 100 + '%' : value > min ? '100%' : '0%'\n  }), children));\n};\n\nexport default memo(forwardRef(Progress));","map":{"version":3,"sources":["index.tsx"],"names":["Progress","resolvedProps","usePropsResolution","useHasResponsiveProps","min","max","now","value","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,GAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;;AA0CA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA,GAAA,EAAsC;AACrD,4BAOIE,kBAAkB,CAAA,UAAA,EAR+B,KAQ/B,CAPtB;AAAA,MAAM,GAAN,uBAAM,GAAN;AAAA,MAAM,GAAN,uBAAM,GAAN;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,YAAN,uBAAM,YAAN;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAMKD,aANL;;AAUA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,UAAU,EAHZ,IAAA;AAIE,IAAA,iBAAiB,EAJnB,aAAA;AAKE,IAAA,kBAAkB,EAAE;AAClBC,MAAAA,GAAG,EADe,GAAA;AAElBC,MAAAA,GAAG,EAFe,GAAA;AAGlBC,MAAAA,GAAG,EACDC,KAAK,GAALA,GAAAA,IAAeA,KAAK,GAApBA,GAAAA,GACK,CAACA,KAAK,GAAN,GAAA,KAAiBF,GAAG,GAArB,GAAC,IADLE,GAAAA,GAEIA,KAAK,GAALA,GAAAA,GAAAA,GAAAA,GAEA;AARY;AALtB,GAAA,CAAA,EAgBE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAGE,IAAA,CAAC,EACCA,KAAK,GAALA,GAAAA,IAAeA,KAAK,GAApBA,GAAAA,GACK,CAACA,KAAK,GAAN,GAAA,KAAiBF,GAAG,GAArB,GAAC,IAAD,GAAC,GADLE,GAAAA,GAEIA,KAAK,GAALA,GAAAA,GAAAA,MAAAA,GAEA;AARR,GAAA,CAAA,EAjBJ,QAiBI,CAhBF,CADF;AAfF,CAAA;;AAiDA,eAAeC,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, IBoxProps } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue } from '../../../components/types';\nimport type { ISizes } from '../../../theme/base/sizes';\n\nexport interface IProgressProps extends IBoxProps<IProgressProps> {\n  /**\n   * Value of Progress.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * Defines height of Progress\n   * @default sm\n   */\n  size?: ResponsiveValue<ISizes | (string & {}) | number>;\n\n  /**\n   * The color scheme of the progress. This should be one of the color keys in the theme (e.g.\"green\", \"red\").\n   * @default primary\n   */\n  colorScheme?: string;\n  // /**\n  //  * Whether progress is indeterminate\n  //  * @default false\n  //  */\n  // isIndeterminate?: boolean;\n  /**\n   * Pseudo prop to give Prop to filled track\n   */\n  _filledTrack?: IBoxProps<IProgressProps>;\n  /**\n   * Min progress value\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Max progress value\n   * @default 100\n   */\n  max?: number;\n}\n\nconst Progress = (props: IProgressProps, ref?: any) => {\n  const {\n    min,\n    max,\n    value,\n    _filledTrack,\n    children,\n    ...resolvedProps\n  } = usePropsResolution('Progress', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        min: min,\n        max: max,\n        now:\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100\n            : value > min\n            ? 100\n            : 0,\n      }}\n    >\n      <Box\n        // {...resolvedProps}\n        {..._filledTrack}\n        w={\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100 + '%'\n            : value > min\n            ? '100%'\n            : '0%'\n        }\n      >\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Progress));\n"]},"metadata":{},"sourceType":"module"}