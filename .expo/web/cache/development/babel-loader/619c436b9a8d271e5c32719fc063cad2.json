{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"isDisabled\", \"isInvalid\", \"isChecked\", \"defaultIsChecked\", \"accessibilityLabel\", \"accessibilityHint\", \"onToggle\", \"value\", \"onValueChange\"],\n    _excluded2 = [\"onTrackColor\", \"offTrackColor\", \"onThumbColor\", \"offThumbColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport RNSwitch from \"react-native-web/dist/exports/Switch\";\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useToken } from \"../../../hooks\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport { combineContextAndProps } from \"../../../utils\";\nvar StyledNBSwitch = makeStyledComponent(RNSwitch);\n\nvar Switch = function Switch(_ref2, ref) {\n  var disabled = _ref2.disabled,\n      isDisabled = _ref2.isDisabled,\n      isInvalid = _ref2.isInvalid,\n      isChecked = _ref2.isChecked,\n      defaultIsChecked = _ref2.defaultIsChecked,\n      accessibilityLabel = _ref2.accessibilityLabel,\n      accessibilityHint = _ref2.accessibilityHint,\n      onToggle = _ref2.onToggle,\n      value = _ref2.value,\n      _onValueChange = _ref2.onValueChange,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var formControlContext = useFormControlContext();\n  var combinedProps = combineContextAndProps(formControlContext, props);\n  var state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false\n  });\n  var checked = !isNil(isChecked) ? isChecked : state.isSelected;\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var _usePropsResolution = usePropsResolution('Switch', props, {\n    isHovered: isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked\n  }),\n      _onTrackColor = _usePropsResolution.onTrackColor,\n      _offTrackColor = _usePropsResolution.offTrackColor,\n      _onThumbColor = _usePropsResolution.onThumbColor,\n      _offThumbColor = _usePropsResolution.offThumbColor,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var onTrackColor = useToken('colors', _onTrackColor);\n  var offTrackColor = useToken('colors', _offTrackColor);\n  var onThumbColor = useToken('colors', _onThumbColor);\n  var offThumbColor = useToken('colors', _offThumbColor);\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isChecked: isChecked,\n    defaultIsChecked: defaultIsChecked,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint\n  }))) {\n    return null;\n  }\n\n  return React.createElement(StyledNBSwitch, _extends({\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    trackColor: {\n      false: offTrackColor,\n      true: onTrackColor\n    },\n    thumbColor: checked ? onThumbColor : offThumbColor,\n    activeThumbColor: onThumbColor,\n    ios_backgroundColor: offTrackColor\n  }, resolvedProps, {\n    disabled: disabled || isDisabled || combinedProps.isDisabled,\n    onValueChange: function onValueChange(val) {\n      _onValueChange && _onValueChange(val);\n      onToggle ? onToggle() : state.toggle();\n    },\n    value: value || checked,\n    ref: mergeRefs([ref, _ref])\n  }));\n};\n\nexport default memo(forwardRef(Switch));","map":{"version":3,"sources":["index.tsx"],"names":["StyledNBSwitch","makeStyledComponent","Switch","props","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","state","useToggleState","defaultSelected","isNil","checked","_ref","React","isHovered","useHover","onTrackColor","offTrackColor","onThumbColor","offThumbColor","resolvedProps","usePropsResolution","isDisabled","disabled","isInvalid","isChecked","useToken","useHasResponsiveProps","defaultIsChecked","accessibilityLabel","accessibilityHint","false","true","val","onValueChange","onToggle","value","mergeRefs","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked,\n  });\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={disabled || isDisabled || combinedProps.isDisabled}\n      onValueChange={(val: boolean) => {\n        onValueChange && onValueChange(val);\n        onToggle ? onToggle() : state.toggle();\n      }}\n      value={value || checked}\n      ref={mergeRefs([ref, _ref])}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]},"metadata":{},"sourceType":"module"}