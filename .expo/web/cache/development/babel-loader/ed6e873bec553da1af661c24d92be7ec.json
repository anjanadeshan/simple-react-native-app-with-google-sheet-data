{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"startIcon\", \"rightIcon\", \"leftIcon\", \"endIcon\", \"spinner\", \"isDisabled\", \"isLoading\", \"spinnerPlacement\"],\n    _excluded2 = [\"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\", \"_text\", \"_stack\", \"_spinner\", \"isLoadingText\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Spinner from \"../Spinner\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { default as Box } from \"../Box\";\nimport HStack from \"../Stack/HStack\";\nimport { Pressable } from \"../Pressable\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useHover, useFocus, useIsPressed } from \"../../primitives/Pressable/Pressable\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Button = function Button(_ref, ref) {\n  var children = _ref.children,\n      startIcon = _ref.startIcon,\n      rightIcon = _ref.rightIcon,\n      leftIcon = _ref.leftIcon,\n      endIcon = _ref.endIcon,\n      spinner = _ref.spinner,\n      isDisabled = _ref.isDisabled,\n      isLoading = _ref.isLoading,\n      _ref$spinnerPlacement = _ref.spinnerPlacement,\n      spinnerPlacement = _ref$spinnerPlacement === void 0 ? 'start' : _ref$spinnerPlacement,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _props$accessibilityR;\n\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('Button', props, {\n    isDisabled: isDisabled,\n    isHovered: isHovered,\n    isFocused: isFocused,\n    isPressed: isPressed,\n    isLoading: isLoading,\n    isFocusVisible: isFocusVisible\n  }),\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      _text = _usePropsResolution._text,\n      _stack = _usePropsResolution._stack,\n      _spinner = _usePropsResolution._spinner,\n      isLoadingText = _usePropsResolution.isLoadingText,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(endIcon, function (child, index) {\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        key: \"button-end-icon-\".concat(index)\n      }, _text), child.props));\n    });\n  }\n\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(startIcon, function (child, index) {\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        key: \"button-start-icon-\".concat(index)\n      }, _text), child.props));\n    });\n  }\n\n  var boxChildren = isLoading && isLoadingText ? isLoadingText : children;\n  var spinnerElement = spinner ? spinner : React.createElement(Spinner, _extends({\n    color: _text === null || _text === void 0 ? void 0 : _text.color\n  }, _spinner));\n  return React.createElement(Pressable, _extends({\n    disabled: isDisabled || isLoading,\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps, {\n    accessibilityRole: (_props$accessibilityR = props.accessibilityRole) !== null && _props$accessibilityR !== void 0 ? _props$accessibilityR : 'button'\n  }), React.createElement(HStack, _stack, startIcon && !isLoading ? startIcon : null, isLoading && spinnerPlacement === 'start' ? spinnerElement : null, boxChildren ? React.createElement(Box, {\n    _text: _text\n  }, isLoading && isLoadingText ? isLoadingText : children) : null, endIcon && !isLoading ? endIcon : null, isLoading && spinnerPlacement === 'end' ? spinnerElement : null));\n};\n\nexport default memo(forwardRef(Button));","map":{"version":3,"sources":["Button.tsx"],"names":["default","Button","spinnerPlacement","props","isHovered","useHover","isPressed","useIsPressed","isFocused","useFocus","focusProps","focusRingProps","useFocusRing","resolvedProps","usePropsResolution","isDisabled","isLoading","isFocusVisible","useHasResponsiveProps","startIcon","endIcon","React","key","child","boxChildren","spinnerElement","spinner","_text","color","composeEventHandlers","pressableProps","hoverProps","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered,\n    isFocused,\n    isPressed,\n    isLoading,\n    isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const boxChildren = isLoading && isLoadingText ? isLoadingText : children;\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {boxChildren ? (\n          <Box _text={_text}>\n            {isLoading && isLoadingText ? isLoadingText : children}\n          </Box>\n        ) : null}\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]},"metadata":{},"sourceType":"module"}