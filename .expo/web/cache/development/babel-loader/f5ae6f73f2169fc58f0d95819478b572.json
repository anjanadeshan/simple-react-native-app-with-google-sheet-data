{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onKeyPress\", \"onFocus\", \"onBlur\", \"disableFocusHandling\", \"inputProps\", \"wrapperRef\"],\n    _excluded2 = [\"isFullWidth\", \"isDisabled\", \"isReadOnly\", \"ariaLabel\", \"accessibilityLabel\", \"placeholderTextColor\", \"selectionColor\", \"underlineColorAndroid\", \"type\", \"fontFamily\", \"fontWeight\", \"fontStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useToken } from \"../../../hooks\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar StyledInput = makeStyledComponent(TextInput);\n\nvar InputBase = function InputBase(_ref2, ref) {\n  var _onKeyPress = _ref2.onKeyPress,\n      _onFocus = _ref2.onFocus,\n      _onBlur = _ref2.onBlur,\n      disableFocusHandling = _ref2.disableFocusHandling,\n      inputProps = _ref2.inputProps,\n      wrapperRef = _ref2.wrapperRef,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setIsFocused = _React$useState2[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    !disableFocusHandling && setIsFocused(focusState);\n    callback();\n  };\n\n  var inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var _usePropsResolution = usePropsResolution('Input', _objectSpread(_objectSpread({}, inputThemeProps), props), {\n    isDisabled: inputThemeProps.isDisabled,\n    isHovered: isHovered,\n    isFocused: isFocused,\n    isInvalid: inputThemeProps.isInvalid,\n    isReadOnly: inputThemeProps.isReadOnly\n  }),\n      isFullWidth = _usePropsResolution.isFullWidth,\n      isDisabled = _usePropsResolution.isDisabled,\n      isReadOnly = _usePropsResolution.isReadOnly,\n      ariaLabel = _usePropsResolution.ariaLabel,\n      accessibilityLabel = _usePropsResolution.accessibilityLabel,\n      placeholderTextColor = _usePropsResolution.placeholderTextColor,\n      selectionColor = _usePropsResolution.selectionColor,\n      underlineColorAndroid = _usePropsResolution.underlineColorAndroid,\n      type = _usePropsResolution.type,\n      fontFamily = _usePropsResolution.fontFamily,\n      fontWeight = _usePropsResolution.fontWeight,\n      fontStyle = _usePropsResolution.fontStyle,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : 'normal'\n  });\n  var resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  var resolvedSelectionColor = useToken('colors', selectionColor);\n  var resolvedUnderlineColorAndroid = useToken('colors', underlineColorAndroid);\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    onKeyPress: _onKeyPress,\n    onFocus: _onFocus,\n    onBlur: _onBlur,\n    disableFocusHandling: disableFocusHandling,\n    inputProps: inputProps\n  }))) {\n    return null;\n  }\n\n  return React.createElement(StyledInput, _extends({}, inputProps, resolvedFontFamily, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, resolvedProps, {\n    placeholderTextColor: resolvedPlaceholderTextColor,\n    selectionColor: resolvedSelectionColor,\n    underlineColorAndroid: resolvedUnderlineColorAndroid,\n    onKeyPress: function onKeyPress(e) {\n      e.persist();\n      _onKeyPress && _onKeyPress(e);\n    },\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    }\n  }, Platform.OS === 'web' ? {\n    disabled: isDisabled,\n    cursor: isDisabled ? 'not-allowed' : 'auto'\n  } : {}, {\n    ref: mergeRefs([ref, _ref, wrapperRef]),\n    style: Platform.OS === 'web' ? {\n      outline: 'none'\n    } : {}\n  }));\n};\n\nexport default memo(forwardRef(InputBase));","map":{"version":3,"sources":["InputBase.tsx"],"names":["StyledInput","makeStyledComponent","InputBase","props","React","handleFocus","setIsFocused","callback","inputThemeProps","isDisabled","inputProps","isInvalid","isReadOnly","isRequired","required","_ref","isHovered","useHover","resolvedProps","usePropsResolution","isFocused","resolvedFontFamily","useResolvedFontFamily","fontFamily","fontWeight","fontStyle","resolvedPlaceholderTextColor","useToken","resolvedSelectionColor","resolvedUnderlineColorAndroid","useHasResponsiveProps","onKeyPress","onFocus","onBlur","disableFocusHandling","type","ariaLabel","isFullWidth","undefined","e","disabled","cursor","mergeRefs","outline","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { TextInput, Platform } from 'react-native';\nimport type { IInputProps } from './types';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst InputBase = (\n  {\n    onKeyPress,\n    onFocus,\n    onBlur,\n    disableFocusHandling,\n    inputProps,\n    wrapperRef,\n    ...props\n  }: IInputProps & {\n    disableFocusHandling?: boolean;\n    inputProps: any;\n  },\n  ref: any\n) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    !disableFocusHandling && setIsFocused(focusState);\n    callback();\n  };\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    ariaLabel,\n    accessibilityLabel,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    type,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered,\n      isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      onKeyPress,\n      onFocus,\n      onBlur,\n      disableFocusHandling,\n      inputProps,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledInput\n      {...inputProps}\n      {...resolvedFontFamily}\n      secureTextEntry={type === 'password'}\n      accessible\n      accessibilityLabel={ariaLabel || accessibilityLabel}\n      editable={isDisabled || isReadOnly ? false : true}\n      w={isFullWidth ? '100%' : undefined}\n      {...resolvedProps}\n      placeholderTextColor={resolvedPlaceholderTextColor}\n      selectionColor={resolvedSelectionColor}\n      underlineColorAndroid={resolvedUnderlineColorAndroid}\n      onKeyPress={(e: any) => {\n        e.persist();\n        onKeyPress && onKeyPress(e);\n      }}\n      onFocus={(e: any) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e: any) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      // TODO: this can be moved to baseStyle using _web\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: isDisabled,\n            cursor: isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n      ref={mergeRefs([ref, _ref, wrapperRef])}\n      style={Platform.OS === 'web' ? { outline: 'none' } : {}}\n    />\n  );\n};\n\nexport default memo(forwardRef(InputBase));\n"]},"metadata":{},"sourceType":"module"}