{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"placement\", \"title\", \"render\", \"status\", \"id\", \"description\", \"isClosable\", \"duration\", \"variant\", \"accessibilityAnnouncement\", \"accessibilityLiveRegion\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport { PresenceTransition } from \"../Transitions\";\nimport VStack from \"../../primitives/Stack/VStack\";\nimport { Alert } from \"../../composites/Alert\";\nimport React, { createContext, useState, useMemo } from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport IconButton from \"../IconButton\";\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { CloseIcon } from \"../../primitives/Icon/Icons\";\nimport Text from \"../../primitives/Text\";\nimport HStack from \"../../primitives/Stack/HStack\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nvar INSET = 50;\nvar POSITIONS = {\n  'top': {\n    top: INSET,\n    left: 0,\n    right: 0\n  },\n  'top-right': {\n    top: INSET,\n    right: 0\n  },\n  'top-left': {\n    top: INSET,\n    left: 0\n  },\n  'bottom': {\n    bottom: INSET,\n    left: 0,\n    right: 0\n  },\n  'bottom-left': {\n    bottom: INSET,\n    left: 0\n  },\n  'bottom-right': {\n    bottom: INSET,\n    right: 0\n  }\n};\nvar initialAnimationOffset = 24;\nvar transitionConfig = {\n  'bottom': initialAnimationOffset,\n  'top': -initialAnimationOffset,\n  'top-right': -initialAnimationOffset,\n  'top-left': -initialAnimationOffset,\n  'bottom-left': initialAnimationOffset,\n  'bottom-right': initialAnimationOffset\n};\nvar ToastContext = createContext({\n  toastInfo: {},\n  setToastInfo: function setToastInfo() {},\n  setToast: function setToast() {},\n  removeToast: function removeToast() {},\n  hideAll: function hideAll() {},\n  isActive: function isActive() {\n    return false;\n  },\n  visibleToasts: {},\n  setVisibleToasts: function setVisibleToasts() {},\n  hideToast: function hideToast() {}\n});\n\nvar CustomToast = function CustomToast() {\n  var _React$useContext = React.useContext(ToastContext),\n      toastInfo = _React$useContext.toastInfo,\n      visibleToasts = _React$useContext.visibleToasts,\n      removeToast = _React$useContext.removeToast;\n\n  var getPositions = function getPositions() {\n    return Object.keys(toastInfo);\n  };\n\n  return getPositions().length > 0 ? React.createElement(OverlayContainer, null, getPositions().map(function (position) {\n    if (Object.keys(POSITIONS).includes(position)) return React.createElement(VStack, _extends({\n      margin: \"auto\",\n      key: position\n    }, POSITIONS[position], {\n      position: \"absolute\",\n      space: 2,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      pointerEvents: \"box-none\"\n    }), toastInfo[position].map(function (toast) {\n      return React.createElement(PresenceTransition, {\n        key: toast.id,\n        visible: visibleToasts[toast.id],\n        onTransitionComplete: function onTransitionComplete(status) {\n          if (status === 'exited') {\n            var _toast$config, _toast$config2;\n\n            removeToast(toast.id);\n            ((_toast$config = toast.config) === null || _toast$config === void 0 ? void 0 : _toast$config.onCloseComplete) && ((_toast$config2 = toast.config) === null || _toast$config2 === void 0 ? void 0 : _toast$config2.onCloseComplete());\n          }\n        },\n        initial: {\n          opacity: 0,\n          translateY: transitionConfig[position]\n        },\n        animate: {\n          opacity: 1,\n          transition: {\n            easing: Easing.ease,\n            duration: 250\n          }\n        },\n        exit: {\n          opacity: 0,\n          scale: 0.85,\n          transition: {\n            easing: Easing.ease,\n            duration: 100\n          }\n        }\n      }, React.createElement(SafeAreaView, null, toast.component));\n    }));else return null;\n  })) : null;\n};\n\nexport var ToastProvider = function ToastProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      toastInfo = _useState2[0],\n      setToastInfo = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      visibleToasts = _useState4[0],\n      setVisibleToasts = _useState4[1];\n\n  var _useState5 = useState(usePropsResolution('Toast', {})),\n      _useState6 = _slicedToArray(_useState5, 1),\n      themeProps = _useState6[0];\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var toastIndex = React.useRef(1);\n  var hideAll = React.useCallback(function () {\n    setVisibleToasts({});\n  }, [setVisibleToasts]);\n  var hideToast = React.useCallback(function (id) {\n    setVisibleToasts(function (prevVisibleToasts) {\n      return _objectSpread(_objectSpread({}, prevVisibleToasts), {}, _defineProperty({}, id, false));\n    });\n  }, [setVisibleToasts]);\n  var isActive = React.useCallback(function (id) {\n    for (var _i = 0, _Object$keys = Object.keys(toastInfo); _i < _Object$keys.length; _i++) {\n      var toastPosition = _Object$keys[_i];\n      var positionArray = toastInfo[toastPosition];\n      return positionArray.findIndex(function (toastData) {\n        return toastData.id === id;\n      }) > -1;\n    }\n\n    return false;\n  }, [toastInfo]);\n  var removeToast = React.useCallback(function (id) {\n    setToastInfo(function (prev) {\n      for (var _i2 = 0, _Object$keys2 = Object.keys(prev); _i2 < _Object$keys2.length; _i2++) {\n        var toastPosition = _Object$keys2[_i2];\n        var positionArray = prev[toastPosition];\n        var isToastPresent = positionArray.findIndex(function (toastData) {\n          return toastData.id === id;\n        }) > -1;\n\n        if (isToastPresent) {\n          var newPositionArray = positionArray.filter(function (item) {\n            return item.id !== id;\n          });\n          var temp = {};\n          temp[toastPosition] = newPositionArray;\n\n          var newToastInfo = _objectSpread(_objectSpread({}, prev), temp);\n\n          return newToastInfo;\n        }\n      }\n\n      return prev;\n    });\n  }, [setToastInfo]);\n  var getTextColor = React.useCallback(function (variant) {\n    switch (variant) {\n      case 'left-accent':\n      case 'top-accent':\n      case 'subtle':\n        return 'coolGray.800';\n\n      case 'solid':\n        return 'warmGray.50';\n\n      case 'outline':\n      case 'outline-light':\n        return colorMode === 'light' ? 'coolGray.800' : 'warmGray.50';\n\n      default:\n        return 'black';\n    }\n  }, [colorMode]);\n  var setToast = React.useCallback(function (props) {\n    var _props$placement = props.placement,\n        placement = _props$placement === void 0 ? 'bottom' : _props$placement,\n        title = props.title,\n        render = props.render,\n        status = props.status,\n        _props$id = props.id,\n        id = _props$id === void 0 ? toastIndex.current++ : _props$id,\n        description = props.description,\n        _props$isClosable = props.isClosable,\n        isClosable = _props$isClosable === void 0 ? true : _props$isClosable,\n        _props$duration = props.duration,\n        duration = _props$duration === void 0 ? 5000 : _props$duration,\n        variant = props.variant,\n        accessibilityAnnouncement = props.accessibilityAnnouncement,\n        _props$accessibilityL = props.accessibilityLiveRegion,\n        accessibilityLiveRegion = _props$accessibilityL === void 0 ? 'polite' : _props$accessibilityL,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    var positionToastArray = toastInfo[placement];\n    if (!positionToastArray) positionToastArray = [];\n    var component = null;\n\n    if (render) {\n      component = render({\n        id: id\n      });\n    } else if (!status && !variant) {\n      component = React.createElement(VStack, _extends({\n        space: title && description ? 1 : 0\n      }, themeProps, rest), React.createElement(Box, {\n        _text: themeProps._title\n      }, title), description && React.createElement(Box, {\n        _text: themeProps._description\n      }, description));\n    } else if (status || variant) {\n      component = React.createElement(Alert, _extends({\n        maxWidth: \"100%\",\n        alignSelf: \"center\",\n        flexDirection: \"row\",\n        status: status !== null && status !== void 0 ? status : 'info',\n        variant: variant,\n        accessibilityLiveRegion: accessibilityLiveRegion\n      }, rest), React.createElement(VStack, {\n        space: 1,\n        flexShrink: 1,\n        w: \"100%\"\n      }, React.createElement(HStack, {\n        flexShrink: 1,\n        alignItems: \"center\",\n        justifyContent: \"space-between\"\n      }, React.createElement(HStack, {\n        space: 2,\n        flexShrink: 1,\n        alignItems: \"center\"\n      }, React.createElement(Alert.Icon, null), React.createElement(Text, {\n        fontSize: \"md\",\n        fontWeight: \"medium\",\n        color: getTextColor(variant !== null && variant !== void 0 ? variant : 'subtle'),\n        flexShrink: 1\n      }, title)), isClosable ? React.createElement(IconButton, {\n        variant: \"unstyled\",\n        icon: React.createElement(CloseIcon, {\n          size: \"3\",\n          color: getTextColor(variant !== null && variant !== void 0 ? variant : 'subtle')\n        }),\n        onPress: function onPress() {\n          return hideToast(id);\n        }\n      }) : null), React.createElement(Box, {\n        px: \"6\",\n        _text: {\n          color: getTextColor(variant !== null && variant !== void 0 ? variant : 'subtle')\n        }\n      }, description)));\n    }\n\n    toastInfo[placement] = [].concat(_toConsumableArray(positionToastArray), [{\n      component: component,\n      id: id,\n      config: props\n    }]);\n    setToastInfo(_objectSpread({}, toastInfo));\n    setVisibleToasts(_objectSpread(_objectSpread({}, visibleToasts), {}, _defineProperty({}, id, true)));\n\n    if (duration !== null) {\n      setTimeout(function () {\n        hideToast(id);\n      }, duration);\n    }\n\n    if (accessibilityAnnouncement && Platform.OS === 'ios') {\n      AccessibilityInfo.announceForAccessibility(accessibilityAnnouncement);\n    }\n\n    return id;\n  }, [getTextColor, themeProps, toastInfo, visibleToasts, hideToast]);\n  var contextValue = React.useMemo(function () {\n    return {\n      toastInfo: toastInfo,\n      setToastInfo: setToastInfo,\n      setToast: setToast,\n      removeToast: removeToast,\n      hideAll: hideAll,\n      isActive: isActive,\n      visibleToasts: visibleToasts,\n      setVisibleToasts: setVisibleToasts,\n      hideToast: hideToast\n    };\n  }, [toastInfo, setToastInfo, setToast, removeToast, hideAll, isActive, visibleToasts, setVisibleToasts, hideToast]);\n  return React.createElement(ToastContext.Provider, {\n    value: contextValue\n  }, children, React.createElement(CustomToast, null));\n};\nexport var useToast = function useToast() {\n  var _React$useContext2 = React.useContext(ToastContext),\n      setToast = _React$useContext2.setToast,\n      hideAll = _React$useContext2.hideAll,\n      isActive = _React$useContext2.isActive,\n      hideToast = _React$useContext2.hideToast;\n\n  var toast = useMemo(function () {\n    return {\n      show: setToast,\n      close: hideToast,\n      closeAll: hideAll,\n      isActive: isActive\n    };\n  }, [setToast, hideAll, isActive, hideToast]);\n  return toast;\n};\nexport var ToastRef = React.createRef();\nexport var Toast = {\n  show: function show(props) {\n    var _ToastRef$current;\n\n    return (_ToastRef$current = ToastRef.current) === null || _ToastRef$current === void 0 ? void 0 : _ToastRef$current.show(props);\n  },\n  close: function close(id) {\n    var _ToastRef$current2;\n\n    return (_ToastRef$current2 = ToastRef.current) === null || _ToastRef$current2 === void 0 ? void 0 : _ToastRef$current2.close(id);\n  },\n  closeAll: function closeAll() {\n    var _ToastRef$current3;\n\n    return (_ToastRef$current3 = ToastRef.current) === null || _ToastRef$current3 === void 0 ? void 0 : _ToastRef$current3.closeAll();\n  },\n  isActive: function isActive(id) {\n    var _ToastRef$current4;\n\n    return (_ToastRef$current4 = ToastRef.current) === null || _ToastRef$current4 === void 0 ? void 0 : _ToastRef$current4.isActive(id);\n  }\n};","map":{"version":3,"sources":["Toast.tsx"],"names":["INSET","POSITIONS","top","left","right","bottom","initialAnimationOffset","transitionConfig","ToastContext","createContext","toastInfo","setToastInfo","setToast","removeToast","hideAll","isActive","visibleToasts","setVisibleToasts","hideToast","CustomToast","React","getPositions","Object","position","toast","status","opacity","translateY","transition","easing","Easing","duration","scale","ToastProvider","children","useState","usePropsResolution","colorMode","useColorMode","toastIndex","id","prevVisibleToasts","toastPosition","positionArray","toastData","prev","isToastPresent","newPositionArray","item","temp","newToastInfo","getTextColor","variant","props","placement","isClosable","accessibilityLiveRegion","rest","positionToastArray","component","render","title","themeProps","_title","description","_description","color","config","setTimeout","accessibilityAnnouncement","Platform","AccessibilityInfo","contextValue","useToast","useMemo","show","close","closeAll","ToastRef","Toast"],"mappings":"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","sourcesContent":["import { OverlayContainer } from '@react-native-aria/overlays';\nimport { PresenceTransition } from '../Transitions';\nimport VStack from '../../primitives/Stack/VStack';\nimport { Alert } from '../../composites/Alert';\nimport React, {\n  createContext,\n  MutableRefObject,\n  useState,\n  useMemo,\n} from 'react';\nimport {\n  AccessibilityInfo,\n  Easing,\n  Platform,\n  SafeAreaView,\n} from 'react-native';\nimport IconButton from '../IconButton';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IToastContext, IToastInfo, IToast, IToastProps } from './types';\nimport Text from '../../primitives/Text';\nimport HStack from '../../primitives/Stack/HStack';\nimport { useColorMode } from '../../../core/color-mode/hooks';\n\nlet INSET = 50;\n\nconst POSITIONS = {\n  'top': {\n    top: INSET,\n    left: 0,\n    right: 0,\n  },\n  'top-right': {\n    top: INSET,\n    right: 0,\n  },\n  'top-left': {\n    top: INSET,\n    left: 0,\n  },\n  'bottom': {\n    bottom: INSET,\n    left: 0,\n    right: 0,\n  },\n  'bottom-left': {\n    bottom: INSET,\n    left: 0,\n  },\n  'bottom-right': {\n    bottom: INSET,\n    right: 0,\n  },\n};\n\nconst initialAnimationOffset = 24;\n\nconst transitionConfig: any = {\n  'bottom': initialAnimationOffset,\n  'top': -initialAnimationOffset,\n  'top-right': -initialAnimationOffset,\n  'top-left': -initialAnimationOffset,\n  'bottom-left': initialAnimationOffset,\n  'bottom-right': initialAnimationOffset,\n};\n\nconst ToastContext = createContext<IToastContext>({\n  toastInfo: {},\n  setToastInfo: () => {},\n  setToast: () => {},\n  removeToast: () => {},\n  hideAll: () => {},\n  isActive: () => false,\n  visibleToasts: {},\n  setVisibleToasts: () => {},\n  hideToast: () => {},\n});\n\nconst CustomToast = () => {\n  const { toastInfo, visibleToasts, removeToast } = React.useContext(\n    ToastContext\n  );\n\n  const getPositions = () => {\n    return Object.keys(toastInfo);\n  };\n\n  return getPositions().length > 0 ? (\n    <OverlayContainer>\n      {getPositions().map((position: string) => {\n        if (Object.keys(POSITIONS).includes(position))\n          return (\n            <VStack\n              margin=\"auto\"\n              key={position}\n              // @ts-ignore\n              {...POSITIONS[position]}\n              position=\"absolute\"\n              space={2}\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              pointerEvents=\"box-none\"\n            >\n              {\n                // @ts-ignore\n                toastInfo[position].map((toast: IToast) => (\n                  <PresenceTransition\n                    key={toast.id}\n                    visible={visibleToasts[toast.id]}\n                    onTransitionComplete={(status: any) => {\n                      if (status === 'exited') {\n                        removeToast(toast.id);\n                        toast.config?.onCloseComplete &&\n                          toast.config?.onCloseComplete();\n                      }\n                    }}\n                    initial={{\n                      opacity: 0,\n                      translateY: transitionConfig[position],\n                    }}\n                    animate={{\n                      opacity: 1,\n                      transition: { easing: Easing.ease, duration: 250 },\n                    }}\n                    exit={{\n                      opacity: 0,\n                      scale: 0.85,\n                      transition: { easing: Easing.ease, duration: 100 },\n                    }}\n                  >\n                    <SafeAreaView>{toast.component}</SafeAreaView>\n                  </PresenceTransition>\n                ))\n              }\n            </VStack>\n          );\n        else return null;\n      })}\n    </OverlayContainer>\n  ) : null;\n};\n\nexport const ToastProvider = ({ children }: { children: any }) => {\n  const [toastInfo, setToastInfo] = useState<IToastInfo>({});\n  const [visibleToasts, setVisibleToasts] = useState<\n    {\n      [key in string]: boolean;\n    }\n  >({});\n\n  const [themeProps] = useState(usePropsResolution('Toast', {}));\n\n  const { colorMode } = useColorMode();\n  const toastIndex = React.useRef(1);\n\n  const hideAll = React.useCallback(() => {\n    setVisibleToasts({});\n  }, [setVisibleToasts]);\n\n  const hideToast = React.useCallback(\n    (id: any) => {\n      setVisibleToasts((prevVisibleToasts) => ({\n        ...prevVisibleToasts,\n        [id]: false,\n      }));\n    },\n    [setVisibleToasts]\n  );\n\n  const isActive = React.useCallback(\n    (id: any) => {\n      for (const toastPosition of Object.keys(toastInfo)) {\n        const positionArray: Array<IToast> = toastInfo[toastPosition];\n        return positionArray.findIndex((toastData) => toastData.id === id) > -1;\n      }\n\n      return false;\n    },\n    [toastInfo]\n  );\n\n  const removeToast = React.useCallback(\n    (id: any) => {\n      setToastInfo((prev) => {\n        for (const toastPosition of Object.keys(prev)) {\n          const positionArray: Array<IToast> = prev[toastPosition];\n          const isToastPresent =\n            positionArray.findIndex((toastData) => toastData.id === id) > -1;\n\n          if (isToastPresent) {\n            const newPositionArray = positionArray.filter(\n              (item) => item.id !== id\n            );\n            const temp: any = {};\n            temp[toastPosition] = newPositionArray;\n\n            const newToastInfo = { ...prev, ...temp };\n            return newToastInfo;\n          }\n        }\n\n        return prev;\n      });\n    },\n    [setToastInfo]\n  );\n\n  const getTextColor = React.useCallback(\n    (\n      variant:\n        | 'solid'\n        | 'left-accent'\n        | 'top-accent'\n        | 'outline'\n        | 'subtle'\n        | 'outline-light'\n        | any\n    ): any => {\n      switch (variant) {\n        case 'left-accent':\n        case 'top-accent':\n        case 'subtle':\n          return 'coolGray.800';\n        case 'solid':\n          return 'warmGray.50';\n        case 'outline':\n        case 'outline-light':\n          return colorMode === 'light' ? 'coolGray.800' : 'warmGray.50';\n        default:\n          return 'black';\n      }\n    },\n    [colorMode]\n  );\n\n  const setToast = React.useCallback(\n    (props: IToastProps): number => {\n      // console.log(\"in settoast\");\n      const {\n        placement = 'bottom',\n        title,\n        render,\n        status,\n        id = toastIndex.current++,\n        description,\n        isClosable = true,\n        duration = 5000,\n        variant,\n        accessibilityAnnouncement,\n        accessibilityLiveRegion = 'polite',\n        ...rest\n      } = props;\n\n      let positionToastArray = toastInfo[placement];\n      if (!positionToastArray) positionToastArray = [];\n\n      let component = null;\n\n      if (render) {\n        component = render({ id });\n      } else if (!status && !variant) {\n        component = (\n          <VStack\n            space={title && description ? 1 : 0}\n            {...themeProps}\n            {...rest}\n          >\n            <Box _text={themeProps._title}>{title}</Box>\n            {description && (\n              <Box _text={themeProps._description}>{description}</Box>\n            )}\n          </VStack>\n        );\n      } else if (status || variant) {\n        component = (\n          <Alert\n            maxWidth=\"100%\"\n            alignSelf=\"center\"\n            flexDirection=\"row\"\n            status={status ?? 'info'}\n            variant={variant as any}\n            accessibilityLiveRegion={accessibilityLiveRegion}\n            {...rest}\n          >\n            <VStack space={1} flexShrink={1} w=\"100%\">\n              <HStack\n                flexShrink={1}\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n              >\n                <HStack space={2} flexShrink={1} alignItems=\"center\">\n                  <Alert.Icon />\n                  <Text\n                    fontSize=\"md\"\n                    fontWeight=\"medium\"\n                    color={getTextColor(variant ?? 'subtle')}\n                    flexShrink={1}\n                  >\n                    {title}\n                  </Text>\n                </HStack>\n                {isClosable ? (\n                  <IconButton\n                    variant=\"unstyled\"\n                    icon={\n                      <CloseIcon\n                        size=\"3\"\n                        color={getTextColor(variant ?? 'subtle')}\n                      />\n                    }\n                    onPress={() => hideToast(id)}\n                  />\n                ) : null}\n              </HStack>\n              <Box\n                px=\"6\"\n                // @ts-ignore\n                _text={{\n                  color: getTextColor(variant ?? 'subtle'),\n                }}\n              >\n                {description}\n              </Box>\n            </VStack>\n          </Alert>\n        );\n      }\n\n      toastInfo[placement] = [\n        ...positionToastArray,\n        { component, id, config: props },\n      ];\n\n      setToastInfo({ ...toastInfo });\n\n      setVisibleToasts({ ...visibleToasts, [id]: true });\n      if (duration !== null) {\n        setTimeout(function () {\n          hideToast(id);\n        }, duration);\n      }\n\n      // iOS doesn't support accessibilityLiveRegion\n      if (accessibilityAnnouncement && Platform.OS === 'ios') {\n        AccessibilityInfo.announceForAccessibility(accessibilityAnnouncement);\n      }\n\n      return id;\n    },\n    [getTextColor, themeProps, toastInfo, visibleToasts, hideToast]\n  );\n\n  const contextValue = React.useMemo(() => {\n    return {\n      toastInfo,\n      setToastInfo,\n      setToast,\n      removeToast,\n      hideAll,\n      isActive,\n      visibleToasts,\n      setVisibleToasts,\n      hideToast,\n    };\n  }, [\n    toastInfo,\n    setToastInfo,\n    setToast,\n    removeToast,\n    hideAll,\n    isActive,\n    visibleToasts,\n    setVisibleToasts,\n    hideToast,\n  ]);\n\n  return (\n    <ToastContext.Provider value={contextValue}>\n      {children}\n      <CustomToast />\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToast = () => {\n  const { setToast, hideAll, isActive, hideToast } = React.useContext(\n    ToastContext\n  );\n\n  const toast = useMemo(\n    () => ({\n      show: setToast,\n      close: hideToast,\n      closeAll: hideAll,\n      isActive,\n    }),\n    [setToast, hideAll, isActive, hideToast]\n  );\n\n  return toast;\n};\n\nexport type IToastService = ReturnType<typeof useToast>;\n\nexport const ToastRef = React.createRef<IToastService>() as MutableRefObject<IToastService>;\n\nexport const Toast: IToastService = {\n  show: (props: IToastProps) => ToastRef.current?.show(props),\n  close: (id: any) => ToastRef.current?.close(id),\n  closeAll: () => ToastRef.current?.closeAll(),\n  isActive: (id: any) => ToastRef.current?.isActive(id),\n};\n"]},"metadata":{},"sourceType":"module"}