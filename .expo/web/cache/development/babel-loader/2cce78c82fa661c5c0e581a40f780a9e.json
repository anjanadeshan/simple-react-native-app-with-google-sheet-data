{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"_text\", \"source\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Box, Image, Text } from \"../../primitives\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Avatar = function Avatar(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      error = _React$useState2[0],\n      setError = _React$useState2[1];\n\n  var _usePropsResolution = usePropsResolution('Avatar', props),\n      _text = _usePropsResolution._text,\n      source = _usePropsResolution.source,\n      style = _usePropsResolution.style,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var Badge = React.createElement(React.Fragment, null);\n  var remainingChildren = [];\n  React.Children.map(children, function (child, key) {\n    if (typeof (child === null || child === void 0 ? void 0 : child.type) === 'object' && (child === null || child === void 0 ? void 0 : child.type.displayName) === 'AvatarBadge') {\n      Badge = child;\n    } else {\n      remainingChildren.push(typeof child === 'string' || typeof child === 'number' ? React.createElement(Text, _extends({\n        key: 'avatar-children-' + key\n      }, _text), child) : child);\n    }\n  });\n  var imageFitStyle = {\n    height: '100%',\n    width: '100%'\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, resolvedProps, source && !error ? React.createElement(Image, {\n    borderRadius: resolvedProps.borderRadius,\n    source: source,\n    alt: '--',\n    _alt: _text,\n    style: [style, imageFitStyle],\n    onError: function onError() {\n      setError(true);\n    },\n    ref: ref\n  }) : remainingChildren.length !== 0 && remainingChildren, Badge);\n};\n\nexport default memo(forwardRef(Avatar));","map":{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","props","React","resolvedProps","usePropsResolution","Badge","remainingChildren","child","key","imageFitStyle","height","width","useHasResponsiveProps","setError","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,GAAA,EAAA,KAAA,EAAA,IAAA;AACA,SAAA,kBAAA;AAEA,SAAA,qBAAA;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAAA,GAAA,EAAoD;AAAA,MAAnD,QAAmD,QAAnD,QAAmD;AAAA,MAApCC,KAAoC;;AACjE,wBAA0BC,KAAK,CAALA,QAAAA,CAA1B,KAA0BA,CAA1B;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AACA,4BAAmDE,kBAAkB,CAAA,QAAA,EAArE,KAAqE,CAArE;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAiCD,aAAjC;;AAKA,MAAIE,KAAK,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAZ,IAAY,CAAZ;AACA,MAAMC,iBAAgC,GAR2B,EAQjE;AAEAJ,EAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAA6B,UAAA,KAAA,EAAA,GAAA,EAAgB;AAC3C,QACE,QAAOK,KAAP,KAAA,IAAOA,IAAAA,KAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,KAAK,CAAZ,IAAA,MAAA,QAAA,IACA,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAA,KAAL,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAL,IAAA,CAAA,WAAA,MAFF,aAAA,EAGE;AACAF,MAAAA,KAAK,GAALA,KAAAA;AAJF,KAAA,MAKO;AACLC,MAAAA,iBAAiB,CAAjBA,IAAAA,CACE,OAAA,KAAA,KAAA,QAAA,IAA6B,OAAA,KAAA,KAA7B,QAAA,GACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,QAAA,GAAG,EAAE,qBAAqBE;AAAhC,OAAA,EAAA,KAAA,CAAA,EADF,KACE,CADF,GADFF,KAAAA;AASD;AAhBHJ,GAAAA;AAmBA,MAAMO,aAAkB,GAAG;AAAEC,IAAAA,MAAM,EAAR,MAAA;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAA3B;;AAEA,MAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,aAAA,EACG,MAAM,IAAI,CAAV,KAAA,GACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,YAAY,EAAET,aAAa,CAD7B,YAAA;AAEE,IAAA,MAAM,EAFR,MAAA;AAGE,IAAA,GAAG,EAHL,IAAA;AAIE,IAAA,IAAI,EAJN,KAAA;AAKE,IAAA,KAAK,EAAE,CAAA,KAAA,EALT,aAKS,CALT;AAME,IAAA,OAAO,EAAE,mBAAM;AACbU,MAAAA,QAAQ,CAARA,IAAQ,CAARA;AAPJ,KAAA;AASE,IAAA,GAAG,EAAEC;AATP,GAAA,CADD,GAaCR,iBAAiB,CAAjBA,MAAAA,KAAAA,CAAAA,IAdJ,iBAAA,EADF,KACE,CADF;AAlCF,CAAA;;AAwDA,eAAeS,IAAI,CAACC,UAAU,CAA9B,MAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image, Text } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _text, source, style, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child, key) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = child;\n    } else {\n      remainingChildren.push(\n        typeof child === 'string' || typeof child === 'number' ? (\n          <Text key={'avatar-children-' + key} {..._text}>\n            {child}\n          </Text>\n        ) : (\n          child\n        )\n      );\n    }\n  });\n\n  const imageFitStyle: any = { height: '100%', width: '100%' };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box {...resolvedProps}>\n      {source && !error ? (\n        <Image\n          borderRadius={resolvedProps.borderRadius}\n          source={source}\n          alt={'--'}\n          _alt={_text}\n          style={[style, imageFitStyle]}\n          onError={() => {\n            setError(true);\n          }}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]},"metadata":{},"sourceType":"module"}